2014-01-07  Titus Brown  <t@Titus-MacBook-Air-2.local>

 * Initialized repository, created server.py and README.

2014-01-15 Matheus Araujo
 * First Commit --- HTTP raw implementation

2014-01-22 Matheus Araujo
 * Homework 2 Done and Tested

2014-02-06 Matheus Araujo
 * Homework 4 Done and Tested

2014-02-23 Matheus Araujo
 * Homework 6

2014-02-23 Matheus Araujo
 * Homework 7

2014-03-18 Matheus Araujo
 * Homework 8

2014-03-19 Matheus Araujo
 * Project 12: Implement AJAX image upload with JQuery. (5 pts.)

2014-03-28 Matheus Araujo
 * Homework 9
 * Integrate the quotes app into server.py, so that it can be run with ‘-A quotes’.
 * Integrate the chats app into server.py, so that it can be run with ‘-A chat’. 
 * Time of each message is displayed in the chat window
 * PROJECT 3: Swipe a template from oswd.org and put it in place on your imageapp server. (5 pts; browser_app)

2014-04-01 Matheus Araujo
 * Homeowrk 10: Create branch
 * PROJECT 9: Add username login via cookies and tracking of image by “owner” (the person who uploaded it). Allow the owner to delete it. (5 pts.; app_feature)
 	
 	To run: python server.py -A imageapp
 	
 	To use new functionality:
 		When load you will see that it no more load the image in the system
 		Click in "Upload" tab.
 		Insert a name and save it.
 		The you'll be allowed to upload an image

 		You can run in another browser and save another name and upload another
 		image. Both browser will work separately.
 		
    * PROJECT 22:Make a thumbnail list using server-side resizing on the fly (in Python code, using PIL or some other image manipulation library). The distinguishing feature here should be that large images are not downloaded to the browser and resized there (as would happen if you used image attributes; see #5)
    
        To use: You need to have "pillow" installed in your python
    
        To run: python server.py -A imageapp
        
        To use new functionality:
            Click on "Thumbnails List" tab in the right corner.
            
            Every image that you upload will appear in the "/list_thumbs" page

            I use PIL to resize the image, and base64 to embed it to <img> tag.

2014-04-01 Matheus Araujo:
    * First Commit hw11
    * PROJECT 23: Write a URL handler so that each image is referred to by its number, e.g. /image_raw/10; make it so that going to the latest image in your imageapp redirects to the right image number. (5 pts; app_feature)

        To use: run the server and access /image_raw/0 or /image_raw/1. Those 2 images are placed in the database when the server
        starts. The users images can be accessed in the same way where the numbers are the user_id in the cookies.
	* PROJECT 14: Write down clear instructions for setting up a new Ubuntu machine on a cloud service of your choice (I have some documentation for Amazon) and installing the imageapp server on port 80. (5 pts; hosting)
		      
		      Check it in the "project14" folder in this directory


2014-04-22 Matheus Araujo:
	* First Commit hw12
	* Project 20: After #14, set up a domain name and static IP address for your site. (5 pts; hosting)
				  Hosted at: http://imageapp.matheusaraujo.com
	* Project 1: Reimplement the imageapp functionality (minus the silly JavaScript) in your own app.py, or Django or flask. (5 pts each; app_framework)
				 The reimplementation is inside "flask_imageapp" folder. Just run "server.py" inside that folder.

2014-04-24 Matheus Araujo:
    * Project 4: Change imageapp to support JPEG and TIFF. (5 pts; app_feature)
                 Just test the upload with the image example inside imageapp folder
    * Project 21: Write a chef recipe for installing your software from github on a Linux VM/ cloud computer. (5 pts; hosting)
                Project 21 information below:

=========================================================
                    PROJECT 21

Tested in a brand new ubuntu 14.04 Virtual machine
=========================================================
#Instal git to download my app
sudo apt-get install git

#Download my app
git clone https://github.com/matheusldaraujo/cse491-serverz.git

#Install virtualenv to have my own python
sudo apt-get install python-virtualenv

#Install python-dev to install quixote
sudo apt-get install python-dev

#Create my own python
virtualenv my_python

#Put my own python in the PATH
export PATH=`pwd`/my_python/bin:$PATH

#Go to my app folder
cd cse491-serverz

#Install pip so can install other packages
easy_install pip

#Instal jinja
pip install jinja2

#Install quixote
pip install quixote

#Install PIL dependencies
sudo apt-get install libjpeg-dev zlib1g-dev

#Install PIL
pip install pillow

#Install zip
pip install zip

#Install sqlite
sudo apt-get install sqlite3

#Start the app you want like imageapp
python server.py -A imageapp